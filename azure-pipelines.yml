# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  buildConfiguration: 'Release'
  dotNetFramework: 'net6.0'
  dotNetVersion: '6.0.x'
  targetRuntime: 'linux-x64'
  azureSPNName: 'Kata-DNA' #get it from your AzureDevOps portal
  azureAppServiceName: 'Kata-DNA-App' #get it from your Azure portal
  project1: JorgeligLabs.Kata.DNA.Api

pool:
  vmImage: ubuntu-latest

steps:

# Build
#- task: UseDotNet@2
#  inputs:
#    version: $(dotNetVersion)
#    includePreviewVersions: true
#    projects: '$(project1)/$(project1).csproj'
#    publishWebProjects: true
#    zipAfterPublish: true
#- script: dotnet publish --configuration $(buildConfiguration)
#  displayName: 'Build .NET 6 Application'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(project1)/$(project1).csproj''


# Run test
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    publishTestResults: true
    projects: '**/*Test.csproj' # update with your test project directory

# Public test
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

# Publish
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# Package
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'JorgeligLabs.Kata.DNA.API'

#Publish it to the Azure App Service
#- task: AzureWebApp@1
#  inputs:
#    appType: webAppLinux
#    azureSubscription: $(azureSPNName) #this is the name of the SPN
#    appName: $(azureAppServiceName) #App Service's unique name
#    package: $(Build.ArtifactStagingDirectory)/**/*.zip
